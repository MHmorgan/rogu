#!/usr/bin/env zsh

# Testing script for Rogu
#
# Usage: ./test [ugor|install|upload|sync|update]...
#
# Explicitly tests:
#   - ugor commands
#   - install
#   - upload
#   - sync
#   - update
#
# Implicitly tests:
#   - get (via upload)
#
# TODO Use local docker Ugor server


#{{{
autoload -U colors && colors

function exists   { which $* &>/dev/null }
function ifexists { which $1 &>/dev/null && $* }

exists gum || {
    echo "[!!] gum command not found"
    exit 1
}

function warn   { echo "$fg_bold[yellow]>>> $*$reset_color" }
function err    { echo "$fg_bold[red]>>> $*$reset_color" }
function log    { echo "\n$fg_bold[default]>>> $*$reset_color" && sleep 0.2 }
function success { echo "$fg_bold[green]>>> Success <<<$reset_color" }
function bold { echo "$fg_bold[default]$*$reset_color" }

function wait { gum spin --spinner=points --title=$2 sleep $1 }

function header {
    echo
    gum style \
        --border=rounded \
        --border-foreground="#ff6d67" \
        --width=20 \
        --align=center "$*"
}

function fail {
    echo "\n$fg_bold[red]FAIL: $*$reset_color"
    if [[ "$FAIL_DUMP" == 1 ]]; then
        dump_history_resources
    fi
    exit 1
}

function assert_equal {
    test -f $1 || fail "File $1 does not exist"
    test -f $2 || fail "File $2 does not exist"
    if [[ -n "$(diff $1 $2)" ]]; then
        diff $1 $2
        fail "Files $1 and $2 are not equal"
    fi
}
#}}}


export ROGU_APP_DIR=testappdir

DIR=testdir

# To Ugor
LOCAL_01=$DIR/01local.txt
LOCAL_02=$DIR/02local.json

# From Ugor
REMOTE_01=$DIR/01remote.txt
REMOTE_02=$DIR/02remote.json

SCRATCH=$DIR/scratch

alias run='venv/bin/python3 -OO rogu'
alias test='venv/bin/python3 rogu'

alias put01="venv/bin/python3 -OO rogu ugor put $LOCAL_01 $REMOTE_01"
alias put02="venv/bin/python3 -OO rogu ugor put $LOCAL_02 $REMOTE_02"

function dump_history_resources {
    bold "\nResources:"
    run resources
    bold "\nHistory:"
    run history
}


# ------------------------------------------------------------------------------
# SETUP

function setup {
    log "SETUP <<<"

    bold "\nCreating..."
    mkdir -pv $DIR
    mkdir -pv $ROGU_APP_DIR

    echo "Hello\nWorld\nFrom Rogu\n" > $LOCAL_01
    echo '{"Hello": "World", "From": "Rogu"}' > $LOCAL_02
}


# ------------------------------------------------------------------------------
# TEARDOWN

function teardown {
    log "TEARDOWN <<<"

    dump_history_resources

    bold "\nRemoving..."
    rm -rfv $DIR
    rm -fv $ROGU_APP_DIR/rogu-history.csv
    rm -fv $ROGU_APP_DIR/rogu-resource-cache.db
    FAIL_DUMP=0

    # Remove test files from ugor
    local LIST=$(run ugor list)
    for FILE in $REMOTE_01 $REMOTE_02; do
        if [[ $LIST =~ $FILE ]]; then
            run ugor delete $FILE
        fi
    done
}


# ------------------------------------------------------------------------------
# UGOR

function ugor {
    log "Creating file 01..."
    test ugor put $LOCAL_01 $REMOTE_01 \
        --description='File 01' \
        --tag='test tag' \
        --tag2='test tag 2' \
        --tag3='test tag 3' \
        --data='{"test": "data"}' \
        --data2='{"test": "data 2"}' \
        --data3='{"test": "data 3"}' \
        --data4='{"test": "data 4"}' \
        --data5='{"test": "data 5"}' ||
        fail 'Failed to upload file 01'
    success

    log "Getting file 01..."
    test ugor get $REMOTE_01 || fail 'Failed to download file 01'
    success

    log "Deleting file 01..."
    test ugor delete $REMOTE_01 || fail 'Failed to delete file 01'
    success

    log "Getting non-existent file 01..."
    test ugor get $REMOTE_01 && fail 'Got non-existent file 01'
    success

    # TODO Test Ugor's find functionality
}


# ------------------------------------------------------------------------------
# INSTALL

function install {

    # Rogu file

    wait 3 "Rogu files..."

    log "Installing non-existent file"
    test install $REMOTE_01 $REMOTE_01 &&
    fail "Installed non-existent file unexpectedly"
    success

    log "Installing file"
    run ugor put $LOCAL_01 $REMOTE_01
    test install $REMOTE_01 $REMOTE_01 ||
    fail "Failed to install file"
    assert_equal $LOCAL_01 $REMOTE_01
    success

    log "Installing file again"
    test install $REMOTE_01 $REMOTE_01 &&
    fail "Installed file again unexpectedly"
    success

    log "Modifying and installing file"
    echo "Something else" > $REMOTE_01
    test install $REMOTE_01 $REMOTE_01 &&
    fail "Wrote over modified file unexpectedly"
    success

    log "Remove and install file"
    rm $REMOTE_01
    test install $REMOTE_01 $REMOTE_01 &&
    fail "Installed file unexpectedly"
    success

    log "Force install file"
    test install --force $REMOTE_01 $REMOTE_01 ||
    fail "Failed to force install file"
    success

    log "Install file with different name"
    test install $REMOTE_02 $REMOTE_01 ||
    fail "Failed to install file with different name"
    success

    log "Install other file with same name"
    run ugor put $LOCAL_02 $REMOTE_02
    test install $REMOTE_02 $REMOTE_02 &&
    fail "Installed other file with same name unexpectedly"
    success

    log "Force install other file with same name"
    test install --force $REMOTE_02 $REMOTE_02 ||
    fail "Failed to force install other file with same name"
    assert_equal $LOCAL_02 $REMOTE_02
    success

    # Local file

    wait 3 "Local files..."

    touch $DIR/src.txt || exit 1
    local SRC=$(realpath $DIR/src.txt) || exit 1
    local DST=$DIR/dst.txt
    local URI=file://$SRC

    log "Installing non-existent local file"
    test install $DST file:///i/dont/exist &&
    fail "Installed non-existent local file unexpectedly"
    success

    log "Installing local file"
    echo "Hello World" > $SRC
    test install $DST $URI ||
    fail "Failed to install local file"
    assert_equal $SRC $DST
    success

    log "Installing local file again"
    test install $DST $URI &&
    fail "Installed local file again unexpectedly"
    success

    log "Modifying and installing local file"
    echo "Something else" > $SRC
    test install $DST $URI ||
    fail "Failed to install modified local file"
    assert_equal $SRC $DST
    success
}


# ------------------------------------------------------------------------------
# UPLOAD

function upload {

    # Rogu file

    wait 3 "Rogu files..."

    log "Uploading non-existent file"
    test upload idont/exist $REMOTE_01 &&
    fail "Uploaded non-existent file unexpectedly"
    success

    log "Uploading file"
    test upload $LOCAL_01 $REMOTE_01 ||
    fail "Failed to upload file"
    success

    log "Uploading file again"
    test upload $LOCAL_01 $REMOTE_01 &&
    fail "Uploaded file again unexpectedly"
    success

    log "Get file and check content"
    test get $SCRATCH $REMOTE_01 ||
    fail "Failed to get file"
    assert_equal $LOCAL_01 $SCRATCH
    success

    log "Modify and upload file"
    echo "Something else" > $LOCAL_01
    test upload $LOCAL_01 $REMOTE_01 ||
    fail "Failed to upload modified file"
    success

    log "Upload a different file with the same name"
    test upload $LOCAL_02 $REMOTE_01 &&
    fail "Uploaded a different file with the same name unexpectedly"
    success

    # TODO Local file
}


# ------------------------------------------------------------------------------
# SYNC

# TODO Test sync functionality


# ------------------------------------------------------------------------------
# UPDATE

# TODO Test update functionality


# ------------------------------------------------------------------------------
# RUN TESTS

if ! [[ -d venv ]]; then
    err "No virtual environment found"
    exit 1
fi

if (( $# == 0 )); then
    COMMANDS=$(gum choose --no-limit \
        --header="Choose tests:" \
        --selected="ugor,install,upload,sync,update" \
        ugor install upload sync update)
    [[ -n "$COMMANDS" ]] || exit 0
else
    COMMANDS=$@
fi

[[ -d $DIR ]] && teardown

for CMD in ${=COMMANDS}; do
    if ! [[ $(test resources) =~ "No resources" ]]; then
        test resources
        fail "There shouldn't be any resources yet"
    fi
    if ! [[ $(test history) =~ "No history" ]]; then
        test history
        fail "There shouldn't be any history yet"
    fi
    FAIL_DUMP=1

    setup
    header $(echo $CMD | tr '[:lower:]' '[:upper:]')
    $CMD
    teardown
done

echo "$fg_bold[green]\nAll tests passed! Have an awesome day! :)$reset_color"
