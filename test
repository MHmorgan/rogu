#!/usr/bin/env zsh

export ROGU_APP_DIR=testappdir

DIR=testdir

# Test files with content
FILE1=$DIR/01local.txt
FILE2=$DIR/02local.json
# Test files without content
FILE3=$DIR/03local.txt
FILE4=$DIR/04local.txt
# Ugor files
RFILE1=$DIR/01remote.txt
RFILE2=$DIR/02remote.json

# Test directory with content
DIR1=$DIR/local-dir01
DIR2=$DIR/local-dir02
# Test directory without content
DIR3=$DIR/local-dir03
DIR4=$DIR/local-dir04
# Ugor directories
RARCHIVE1=$DIR/remote-dir01
RARCHIVE2=$DIR/remote-dir02

SCRATCH=$DIR/scratch

alias run_rogu='venv/bin/python3 -OO rogu'
alias test_rogu='venv/bin/python3 rogu'


# ------------------------------------------------------------------------------
# HELPERS

autoload -U colors && colors

function exists   { which $* &>/dev/null }
function ifexists { which $1 &>/dev/null && $* }

exists gum || {
    echo "[!!] gum command not found"
    exit 1
}

function warn    { echo "$fg_bold[yellow]>>> $*$reset_color" }
function err     { echo "$fg_bold[red]>>> $*$reset_color" }
function log     { echo "\n$fg_bold[default]>>> $*$reset_color" && sleep 0.2 }
function bold    { echo "$fg_bold[default]$*$reset_color" }
function success { echo "$fg_bold[green]>>> Success <<<$reset_color" }

function wait {
    gum spin --spinner=points --title=$2 sleep $1
}

function header {
    echo
    gum style \
        --border=rounded \
        --width=20 \
        --align=center "$*"
}

function fail {
    echo "\n$fg_bold[red]FAIL: $*$reset_color"
    if [[ "$FAIL_DUMP" == 1 ]]; then
        dump_history_resources
    fi
    exit 1
}

function failed {
    echo "\n$fg_bold[red]FAILED$reset_color"
    if [[ "$FAIL_DUMP" == 1 ]]; then
        dump_history_resources
    fi
    exit 1
}

function assert_equal {
    # Compare two files
    if [[ -f $1 && -f $2 ]]
    then
        if [[ -n "$(diff $1 $2)" ]]
        then
            diff $1 $2
            fail "Files $1 and $2 are not equal"
        fi

    # Compare two directories
    elif [[ -d $1 && -d $2 ]]
    then
        if [[ -n "$(diff -r $1 $2)" ]]
        then
            diff -r $1 $2
            fail "Directories $1 and $2 are not equal"
        fi

    else
        fail "Files $1 and $2 are not of the same type"
    fi
}

function dump_history_resources {
    bold "\nResources:"
    run_rogu resources
    bold "\nHistory:"
    run_rogu history
}


# ------------------------------------------------------------------------------
# SETUP

function setup {
    log "SETUP <<<"

    bold "\nCreating..."
    mkdir -pv $DIR
    mkdir -pv $ROGU_APP_DIR
    mkdir $DIR1
    mkdir $DIR2

    echo "Hello\nWorld\nFrom Rogu\n" > $FILE1
    echo '{"Hello": "World", "From": "Rogu"}' > $FILE2

    cp $FILE1 $FILE2 $DIR1
    cp $FILE1 $FILE2 $DIR2
}


# ------------------------------------------------------------------------------
# TEARDOWN

function teardown {
    log "TEARDOWN <<<"

    dump_history_resources

    bold "\nRemoving..."
    rm -rfv $DIR
    rm -rfv $ROGU_APP_DIR/file-cache
    rm -fv $ROGU_APP_DIR/rogu-history.csv
    rm -fv $ROGU_APP_DIR/rogu-resource-cache.db
    FAIL_DUMP=0

    # Remove test files from ugor
    local LIST=$(run_rogu ugor list)
    local TARGETS=(
        $RFILE1
        $RFILE2
        $RARCHIVE1.tar.xz
        $RARCHIVE2.zip
    )
    for FILE in $TARGETS; do
        if [[ $LIST =~ $FILE ]]; then
            run_rogu ugor delete $FILE &&
            echo "$FILE from Ugor"
        fi
    done
}


# ------------------------------------------------------------------------------
# UGOR

function ugor {

    wait 3 "Ugor stuff..."

    log "Creating file 01..."
    test_rogu ugor put $FILE1 $RFILE1 \
        --description='File 01' \
        --tag='test tag' \
        --tag2='test tag 2' \
        --tag3='test tag 3' \
        --data='{"test": "data"}' \
        --data2='{"test": "data 2"}' \
        --data3='{"test": "data 3"}' \
        --data4='{"test": "data 4"}' \
        --data5='{"test": "data 5"}' ||
        fail 'Failed to upload file 01'
    success

    log "Getting file 01..."
    test_rogu ugor get $RFILE1 || fail 'Failed to download file 01'
    success

    log "Deleting file 01..."
    test_rogu ugor delete $RFILE1 || fail 'Failed to delete file 01'
    success

    log "Getting non-existent file 01..."
    test_rogu ugor get $RFILE1 && fail 'Got non-existent file 01'
    success

    # TODO Test Ugor's find functionality
}


# ------------------------------------------------------------------------------
# FILE

function file {

    local URI1="ugor://file/$RFILE1"
    local URI2="ugor://file/$RFILE2"

    wait 3 "UPLOAD"

    log "Uploading non-existent file"
    test_rogu upload idont/exist $URI1 &&
    fail "Uploaded non-existent file unexpectedly"
    success

    log "Uploading to invalid Rogu URI"
    test_rogu upload $FILE1 https://foobar.org/rogu &&
    fail "Uploaded to invalid Rogu URI unexpectedly"
    success

    log "Uploading file"
    test_rogu upload $FILE1 $URI1 || failed
    success

    log "Uploading file again"
    test_rogu upload $FILE1 $URI1 &&
    fail "Uploaded file again unexpectedly"
    success

    log "Upload a different file with the same name"
    test_rogu upload $FILE2 $URI1 &&
    fail "Uploaded a different file with the same name unexpectedly"
    success

    wait 3 "INSTALL"

    log "Installing non-existent file"
    test_rogu install $RFILE1 $URI2 &&
    fail "Installed non-existent file unexpectedly"
    success

    log "Installing from invalid Rogu URI"
    test_rogu install $RFILE1 https://foobar.org/rogu &&
    fail "Installed from invalid Rogu URI unexpectedly"
    success

    log "Installing file"
    test_rogu install $FILE3 $URI1 || failed
    assert_equal $FILE1 $FILE3
    success

    log "Installing file again"
    test_rogu install $FILE3 $URI1 &&
    fail "Installed file again unexpectedly"
    success

    wait 3 "SYNC"

    log "Sync file from local to remote"
    test_rogu sync $FILE2 $URI2 || failed
    success

    log "Sync file from local to remote again"
    test_rogu sync $FILE2 $URI2 &&
    fail "Synced file from local to remote again unexpectedly"
    success

    log "Sync file from remote to local"
    test_rogu sync $FILE4 $URI2 || failed
    assert_equal $FILE2 $FILE4
    success

    wait 3 "UPDATE"

    log "Modify and update file 1"
    echo "Once upon a time, in a galaxy far far away..." > $FILE1
    test_rogu update || failed
    assert_equal $FILE1 $FILE3
    assert_equal $FILE2 $FILE4
    success

    log "Modify and update file 2"
    echo "Lorem ipsum..." > $FILE2
    test_rogu update || failed
    assert_equal $FILE1 $FILE3
    assert_equal $FILE2 $FILE4
    success
}


# ------------------------------------------------------------------------------
# ARCHIVE

function archive {

    local URI1="ugor://archive/$RARCHIVE1"
    local URI2="ugor://archive/$RARCHIVE2?format=zip"

    wait 3 "UPLOAD"

    log "Upload non-existent directory"
    test_rogu upload idont/exist $URI1 &&
    fail "Uploaded non-existent directory unexpectedly"
    success

    log "Upload directory"
    test_rogu upload $DIR1 $URI1 || failed
    success

    log "Upload directory again"
    test_rogu upload $DIR1 $URI1 &&
    fail "Uploaded directory again unexpectedly"
    success

    wait 3 "INSTALL"

    log "Install non-existent archive"
    test_rogu install $DIR3 ugor://archive/idont/exist &&
    fail "Installed non-existent archive unexpectedly"
    success

    log "Install archive"
    test_rogu install $DIR3 $URI1 || failed
    assert_equal $DIR1 $DIR3
    success

    log "Install archive again"
    test_rogu install $DIR3 $URI1 &&
    fail "Installed archive again unexpectedly"
    success

    wait 3 "SYNC"

    log "Sync archive from local to remote"
    test_rogu sync $DIR2 $URI2 || failed
    success

    log "Sync archive from local to remote again"
    test_rogu sync $DIR2 $URI2 &&
    fail "Synced archive from local to remote again unexpectedly"
    success

    log "Sync archive from remote to local"
    test_rogu sync $DIR4 $URI2 || failed
    assert_equal $DIR2 $DIR4
    success

    wait 3 "UPDATE"

    log "Modifying and updating archive 1"
    echo "Once upon a time, in a galaxy far, far away..." > $DIR1/README.md
    test_rogu update || failed
    assert_equal $DIR1 $DIR3
    assert_equal $DIR2 $DIR4
    success

    log "Modifying and updating archive 2"
    echo "Lorem ipsum dolor sit amet, consectetur adipiscing elit..." > $DIR2/README.md
    test_rogu update || failed
    assert_equal $DIR1 $DIR3
    assert_equal $DIR2 $DIR4
    success
}


# ------------------------------------------------------------------------------
# RUN TESTS

if ! [[ -d venv ]]; then
    err "No virtual environment found"
    exit 1
fi

ALL_COMMANDS=(ugor file archive)

# Determine which tests to run_rogu
if (( $# == 0 )); then
    COMMANDS=$(gum choose --no-limit \
        --header="Choose tests:" \
        --selected=$(echo $ALL_COMMANDS | tr ' ' ',') \
        ${=ALL_COMMANDS})
    [[ -n "$COMMANDS" ]] || exit 0
elif [[ $@ == "all" ]]; then
    COMMANDS=$ALL_COMMANDS
else
    COMMANDS=$@
fi

# Clean up after failed tests
[[ -d $DIR ]] && teardown

for CMD in ${=COMMANDS}; do
    # Some sanity checks
    if ! [[ $(test_rogu resources) =~ "No resources" ]]; then
        test_rogu resources
        fail "There shouldn't be any resources yet"
    fi
    if ! [[ $(test_rogu history) =~ "No history" ]]; then
        test_rogu history
        fail "There shouldn't be any history yet"
    fi
    FAIL_DUMP=1

    # Run the test
    setup
    header $(echo $CMD | tr '[:lower:]' '[:upper:]')
    $CMD
    teardown
done

echo "$fg_bold[green]\nAll tests passed! Have an awesome day! :)$reset_color"
